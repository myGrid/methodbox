<div class="yui-skin-sam">
	<div id="extracts" class="yui-navset">
		<ul class="yui-nav">
			<% if current_user %>
				<li class="selected"><a href="#extracts_tab_0" title="All the Data Extracts you have created"><em><%= h 'My Data Extracts' %></em></a></li>
			<% end -%>
			<% if current_user %>
				<li><a href="#extracts_tab_1" title="All the Data Extracts that you have permission to view"><em><%= h 'All Data Extracts' %></em></a></li>
			<% else -%>
				<li class="selected"><a href="#extracts_tab_1" title="All the Data Extracts that you have permission to view"><em><%= h 'All Data Extracts' %></em></a></li>
			<% end -%>
		</ul>
		<!-- tab content -->
		<div class="yui-content">
			<% if current_user %>
				<div class="asset-resource-list" id="extracts_tab_0">
					<%= will_paginate @my_archives, :param_name=>'my_page' %>
				<div style="text-align: center; margin: 0.5em;">
					<%= page_entries_info @my_archives, :entry_name => 'Data Extract' %>
				</div>
 					<%= render :partial => "assets/resource_list", :locals => { :collection => @my_archives, :authorization_for_showing_already_done=>true } %>
					<%= will_paginate @my_archives, :param_name=>'my_page' %>
				</div>
			<% end -%>
			<div class="asset-resource-list" id="extracts_tab_1">
<% if @all_archives.empty? -%>
<h1>There are no public Data Extracts available to view.</h1>
<% else -%>
				<%= will_paginate @all_archives, :param_name=>'all_page' %>
				<div style="text-align: center; margin: 0.5em;">
					<%= page_entries_info @all_archives, :entry_name => 'Data Extract' %>
				</div>
      				<%= render :partial => "assets/resource_list", :locals => { :collection => @all_archives, :authorization_for_showing_already_done=>true } %>
				<%= will_paginate @all_archives, :param_name=>'all_page' %>
<% end -%>
			</div>
		</div>
	</div>
</div>
<script type="text/javascript">
    // The initially selected tab will be chosen in the following order:
    //
    // URL fragment identifier (it will be there if the user previously
    // bookmarked the application in a specific state)
    //
    // or
    //
    // "tab0" (default)

    var bookmarkedTabViewState = YAHOO.util.History.getBookmarkedState("extracts_tabview");
    var initialTabViewState = bookmarkedTabViewState || "extracts_tab_1";

    var tabView;

    // Register our TabView module. Module registration MUST
    // take place before calling YAHOO.util.History.initialize.
    YAHOO.util.History.register("tabview", initialTabViewState, function (state) {
        // This is called after calling YAHOO.util.History.navigate, or after the user
        // has trigerred the back/forward button. We cannot discrminate between
        // these two situations.

        // "state" can be "extracts_tab_1", "extracts_tab_2"
        // Select the right tab:
        tabView.set("activeIndex", state);
    });

    function handleTabViewActiveTabChange (e) {
        var newState, currentState;

        newState = "extracts_tab_" + this.getTabIndex(e.newValue);

        try {
            currentState = YAHOO.util.History.getCurrentState("extracts_tabview");
            // The following test is crucial. Otherwise, we end up circling forever.
            // Indeed, YAHOO.util.History.navigate will call the module onStateChange
            // callback, which will call tabView.set, which will call this handler
            // and it keeps going from here...
            if (newState != currentState) {
                splitState = newState.split("_");
                YAHOO.util.History.navigate("extracts_tabview", newState);
            }
        } catch (e) {
             splitState = newState.split("_");
             tabView.set("activeIndex", splitState.pop());
        }
    }

    function initTabView () {
        // Instantiate the TabView control...
        tabView = new YAHOO.widget.TabView("extracts");
        tabView.addListener("activeTabChange", handleTabViewActiveTabChange);
    }

    // Use the Browser History Manager onReady method to instantiate the TabView widget.
    YAHOO.util.History.onReady(function () {
        var currentState;

        initTabView();

        // This is the tricky part... The onLoad event is fired when the user
        // comes back to the page using the back button. In this case, the
        // actual tab that needs to be selected corresponds to the last tab
        // selected before leaving the page, and not the initially selected tab.
        // This can be retrieved using getCurrentState:
        currentState = YAHOO.util.History.getCurrentState("extracts_tabview");
        splitState = currentState.split("_");
        tabView.set("activeIndex", splitState.pop());
    });

    // Initialize the browser history management library.
    try {
        YAHOO.util.History.initialize("yui-history-field", "yui-history-iframe");
    } catch (e) {
        // The only exception that gets thrown here is when the browser is
        // not supported (Opera, or not A-grade) Degrade gracefully.
        initTabView();
    }
</script>
