<%# this partial will display a dynamically generated view of all assets from a collection; -%>
<%# different types of assets will be placed in different tabs based on their class; -%>
<%# the partial requires 3 parameters to be defined: -%>
<%# - asset_hash: a hash of all asset instances, where keys are asset class names and values are arrays of asset instances of that class -%>
<%# - narrow_view: type of the partial to use for asset listings: 'false' to use the same partial with much info as on SOPs listing page -%>
<%#                                                               'true' to use a partial with fewer information; suitable for 'show' pages for people/projects -%>
<%# - authorization_already_done: boolean value indicating whether all items in the collection have already been authorized for the current user to view or not -%>

<% narrow_view ||= false -%>
<% authorization_already_done ||= false -%>
<!-- Tabs and headings-->
<% unless asset_hash.empty? -%>
	<div class="yui-skin-sam">
		<div id="assets" class="yui-navset">
			<ul class="yui-nav">
			<% tab_count = 1 %>
			<% asset_hash.each_key do |resource_type| -%>
				<% visible_resource_type = resource_type.titleize.pluralize -%>
				<% visible_resource_type = "Data Extracts" if visible_resource_type=="Csvarchives" %>
				<% visible_resource_type = "Methods and Scripts" if visible_resource_type=="Scripts" %>
				<% unless (resources = asset_hash[resource_type]).nil? || resources.empty? -%>
				<% if tab_count == 1 %>
					<li class="selected"><a href="#assets_tab_<%= tab_count.to_s -%>" title="<%= visible_resource_type + '(' + resources.length.to_s + ')' -%>"><em><%= h truncate(visible_resource_type + '(' + resources.length.to_s + ')', :length=> 30, :omission => '...') %></em></a></li>
				<% else -%>
					<li><a href="#assets_tab_<%= tab_count.to_s -%>" title="<%= visible_resource_type + '(' + resources.length.to_s + ')' -%>"><em><%= h truncate(visible_resource_type + '(' + resources.length.to_s + ')', :length=> 30, :omission => '...') %></em></a></li>
				<% end -%>
				<% end -%>
			<% tab_count += 1 %>
			<% end -%>
			</ul>
			<!-- tab content -->
			<div class="yui-content">
			<% asset_hash.each_key do |resource_type| -%>
			<% tab_id = 1 -%>
			<% visible_resource_type = resource_type.titleize.pluralize -%>
			<% visible_resource_type = "Data Extracts" if visible_resource_type=="Csvarchives" %>
			<% visible_resource_type = "Methods and Scripts" if visible_resource_type=="Scripts" %>
			<% unless (resources = asset_hash[resource_type]).nil? || resources.empty? -%>
					<% if resource_type.downcase == "survey" -%>
						<% @survey_hash = Hash.new %>
						<% resources.each do |survey| %>
							<% if (!@survey_hash.has_key?(survey.survey_type.name)) -%>
	            				<% @survey_hash[survey.survey_type.name] = Array.new -%>
	          				<% end -%>
	          				<% @survey_hash[survey.survey_type.name].push(survey) -%>
	        			<% end -%>
	<!-- Need a form to wrap the surveys tab so that variable searching can take place -->
						<% form_tag(:controller => "surveys", :action => "search_variables") do -%>
							<%= render :partial=>"surveys/survey_search_box" -%>
							<div class="asset-resource-list">
								<%= render :partial => "assets/resource_list", :locals => { :collection => resources, :narrow_view => narrow_view, :authorization_for_showing_already_done => authorization_already_done } -%>
							</div>
						<% end %>
					<% else %>
					<div class="asset-resource-list" id="<%= 'assets_tab_' + tab_id.to_s -%>">
						<%= render :partial => "assets/resource_list", :locals => { :collection => resources, :narrow_view => narrow_view, :authorization_for_showing_already_done => authorization_already_done } -%>
					</div>
					<% end %>
			<% tab_id += 1 -%>
			<% end -%>
		<% end -%>
</div>
		</div>
	</div>
<% else -%>
	<span class="none_text">No items (or none that you are permitted to see).</span>
<% end -%>

<script type="text/javascript">
(function () {

    // The initially selected tab will be chosen in the following order:
    //
    // URL fragment identifier (it will be there if the user previously
    // bookmarked the application in a specific state)
    //
    //         or
    //
    // "tab0" (default)

    var bookmarkedTabViewState = YAHOO.util.History.getBookmarkedState("tabview");
    var initialTabViewState = bookmarkedTabViewState || "assets_tab_1";

    var tabView;

    // Register our TabView module. Module registration MUST
    // take place before calling YAHOO.util.History.initialize.
    YAHOO.util.History.register("tabview", initialTabViewState, function (state) {
        // This is called after calling YAHOO.util.History.navigate, or after the user
        // has trigerred the back/forward button. We cannot discrminate between
        // these two situations.

        // "state" can be "survey_tab_1", "survey_tab_2" etc.
        // Select the right tab:
        tabView.set("activeIndex", state);
    });

    function handleTabViewActiveTabChange (e) {
        var newState, currentState;

        newState = "assets_tab_" + this.getTabIndex(e.newValue);

        try {
            currentState = YAHOO.util.History.getCurrentState("tabview");
            // The following test is crucial. Otherwise, we end up circling forever.
            // Indeed, YAHOO.util.History.navigate will call the module onStateChange
            // callback, which will call tabView.set, which will call this handler
            // and it keeps going from here...
            if (newState != currentState) {
		splitState = newState.split("_");
                YAHOO.util.History.navigate("tabview", splitState.pop());
            }
        } catch (e) {
		splitState = newState.split("_");
            	tabView.set("activeIndex", splitState.pop());
        }
    }

    function initTabView () {
        // Instantiate the TabView control...
        tabView = new YAHOO.widget.TabView("assets");
        tabView.addListener("activeTabChange", handleTabViewActiveTabChange);
    }

    // Use the Browser History Manager onReady method to instantiate the TabView widget.
    YAHOO.util.History.onReady(function () {
        var currentState;

        initTabView();

        // This is the tricky part... The onLoad event is fired when the user
        // comes back to the page using the back button. In this case, the
        // actual tab that needs to be selected corresponds to the last tab
        // selected before leaving the page, and not the initially selected tab.
        // This can be retrieved using getCurrentState:
        currentState = YAHOO.util.History.getCurrentState("tabview");
	splitState = currentState.split("_");
        tabView.set("activeIndex", splitState.pop());
    });

    // Initialize the browser history management library.
    try {
        YAHOO.util.History.initialize("yui-history-field", "yui-history-iframe");
    } catch (e) {
        // The only exception that gets thrown here is when the browser is
        // not supported (Opera, or not A-grade) Degrade gracefully.
        initTabView();
    }

})();

</script>
